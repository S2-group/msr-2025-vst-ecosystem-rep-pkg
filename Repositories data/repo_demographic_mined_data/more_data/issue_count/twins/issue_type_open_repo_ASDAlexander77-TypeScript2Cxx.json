{"total_count": 4, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19", "repository_url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx", "labels_url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19/comments", "events_url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19/events", "html_url": "https://github.com/ASDAlexander77/TypeScript2Cxx/issues/19", "id": 1789301813, "node_id": "I_kwDODvZye85qppQ1", "number": 19, "title": "incorrect regex compilation", "user": {"login": "Sinfolke", "id": 79077842, "node_id": "MDQ6VXNlcjc5MDc3ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/79077842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sinfolke", "html_url": "https://github.com/Sinfolke", "followers_url": "https://api.github.com/users/Sinfolke/followers", "following_url": "https://api.github.com/users/Sinfolke/following{/other_user}", "gists_url": "https://api.github.com/users/Sinfolke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sinfolke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sinfolke/subscriptions", "organizations_url": "https://api.github.com/users/Sinfolke/orgs", "repos_url": "https://api.github.com/users/Sinfolke/repos", "events_url": "https://api.github.com/users/Sinfolke/events{/privacy}", "received_events_url": "https://api.github.com/users/Sinfolke/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-07-05T10:54:07Z", "updated_at": "2023-07-11T12:42:29Z", "closed_at": null, "author_association": "NONE", "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "active_lock_reason": null, "body": "I honestly didn't learn the c++ and i want to use compiler just to create a quick binary file.\r\nThe part of ts file:\r\n```\r\n/**\r\n * Defines whether a line contains unclosed brackets.\r\n * @param symbol the close and open symbol. Example: {|}, '{' is opend and '}' is close symbol     \r\n * @param line the line to be searched in\r\n * @returns undefined if all brackets on a line are closed or array with amount of unclosed brackets and id of last unclosed\r\n */\r\nfunction unclosed(symbol:string, line: string) {\r\n    let openedBrackets = 0;\r\n    let match;\r\n    let id = 0;\r\n    const splitted = symbol.split('|');\r\n    const escapeCharactersRegex = /(\\(|\\)|\\[|\\]|\\{|\\}|\\*|\\||\\$|\\+|\\\\)/;\r\n    const escapeStart = !!splitted[0].match(escapeCharactersRegex);\r\n    const escapeEnd = !!splitted[1].match(escapeCharactersRegex);\r\n    const openRegex = new RegExp(`(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*${escapeStart ? '\\\\' : ''}${splitted[0]}`, \"g\");\r\n    const closeRegex = new RegExp(`(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*${escapeEnd ? '\\\\' : ''}${splitted[1]}`, \"g\");\r\n    while ((match = openRegex.exec(line)) !== null) {\r\n        openedBrackets++;\r\n        id = match.index + 1;\r\n    }\r\n    while ((match = closeRegex.exec(line)) !== null) {\r\n        openedBrackets--;\r\n    }\r\n    if (openedBrackets % 2 != 0) {\r\n        return [openedBrackets, id];\r\n    }\r\n}\r\n```\r\nThe output c++ file:\r\n```\r\nany unclosed(string symbol, string line)\r\n{\r\n    auto openedBrackets = 0;\r\n    any match;\r\n    auto id = 0;\r\n    auto splitted = symbol->split(STR(\"|\"));\r\n    auto escapeCharactersRegex = (new RegExp(STR(\"(\\(|\\)|\\[|\\]|\\{|\\}|\\*|\\||\\$|\\+|\\\\\")));\r\n    auto escapeStart = !!const_(splitted)[0]->match(escapeCharactersRegex);\r\n    auto escapeEnd = !!const_(splitted)[1]->match(escapeCharactersRegex);\r\n    auto openRegex = std::make_shared<RegExp>(STR(\"(?<!\\\\)(?:\\\\\\\\)*\") + (escapeStart) ? STR(\"\\\") : string_empty + string_empty + const_(splitted)[0] + string_empty, STR(\"g\"));\r\n    auto closeRegex = std::make_shared<RegExp>(STR(\"(?<!\\\\)(?:\\\\\\\\)*\") + (escapeEnd) ? STR(\"\\\") : string_empty + string_empty + const_(splitted)[1] + string_empty, STR(\"g\"));\r\n    while ((match = openRegex->exec(line)) != nullptr)\r\n    {\r\n        openedBrackets++;\r\n        id = match[\"index\"] + 1;\r\n    }\r\n    while ((match = closeRegex->exec(line)) != nullptr)\r\n    {\r\n        openedBrackets--;\r\n    }\r\n    if (not_equals(openedBrackets % 2, 0)) {\r\n        return array<js::number>{ openedBrackets, id };\r\n    }\r\n};\r\n```\r\nThe issue is that it escaped the end quote (escapeStart) ? STR(\"**\\\"**) and so it is not considered end of string, the same is on the second line which contains almost the same pattern", "reactions": {"url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/ASDAlexander77/TypeScript2Cxx/issues/19/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}