{"total_count": 61, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191", "repository_url": "https://api.github.com/repos/RustAudio/vst-rs", "labels_url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191/comments", "events_url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191/events", "html_url": "https://github.com/RustAudio/vst-rs/issues/191", "id": 1400340055, "node_id": "I_kwDOBfitT85Td35X", "number": 191, "title": "Question: Realistic host implementations examples / Host lockup", "user": {"login": "PetrGlad", "id": 124476, "node_id": "MDQ6VXNlcjEyNDQ3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/124476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetrGlad", "html_url": "https://github.com/PetrGlad", "followers_url": "https://api.github.com/users/PetrGlad/followers", "following_url": "https://api.github.com/users/PetrGlad/following{/other_user}", "gists_url": "https://api.github.com/users/PetrGlad/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetrGlad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetrGlad/subscriptions", "organizations_url": "https://api.github.com/users/PetrGlad/orgs", "repos_url": "https://api.github.com/users/PetrGlad/repos", "events_url": "https://api.github.com/users/PetrGlad/events{/privacy}", "received_events_url": "https://api.github.com/users/PetrGlad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-06T21:51:04Z", "updated_at": "2022-11-03T21:45:28Z", "closed_at": "2022-11-03T21:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying  to implement plugin host app. I understand that host side is not the focus of this project but I could not find alternatives in Rust and the example from  https://github.com/RustAudio/vst-rs/blob/master/examples/simple_host.rs did work for me. So I managed to send an event to the plugin (Pianoteq) and get a buffer of sound from it.\r\nNow I struggle to figure out following:\r\n\r\n(1) What is supposed structure of a `vst::host::Host` impl? It's methods imply that it should have access to a plugin instance, but the example has some external var to have access to it. If I would \r\n```rust\r\npub struct VstHost {\r\n    pub plugin_instance: PluginInstance,\r\n}\r\nimpl Host for VstHost;\r\n```\r\nand use `Arc<Mutex<VstHost>>` to keep it then I would have to wrap plugin_instance into, say, `Option` to allow initializing host without plugin yet available and then lock/set the field. But then I am not sure how to continue because I would have to lock to get access to plugin_instance field which would in turn dead-lock on host (e.g. in `PluginInstance::resume()`). If I use some another struct to keep instance and host, then the `VstHost` would not actually host anything :) \r\n\r\n~(2) How to get continuous output from the plugin? After I send an event the sustain may potentially be minutes long, I may send another event while sustain from previous one is still there, and in general I'd want to just get a stream of audio buffers of it. Should I just call `instance.process(&mut audio_buffer);` repeatedly to get next portion of output samples?~ \r\nUPDATED: OK, it seems that repeated calls to `instance.process(&mut audio_buffer);` is the way to get continuous output.\r\n\r\nAre there projects that use this project to implement a plugin host? Or maybe there is a better alternative for that?", "reactions": {"url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/RustAudio/vst-rs/issues/191/timeline", "performed_via_github_app": null, "state_reason": "completed", "score": 1.0}]}