{"total_count": 1, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54", "repository_url": "https://api.github.com/repos/srg-imperial/SaBRe", "labels_url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54/comments", "events_url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54/events", "html_url": "https://github.com/srg-imperial/SaBRe/pull/54", "id": 611981184, "node_id": "MDExOlB1bGxSZXF1ZXN0NDEzMDM1Mzcx", "number": 54, "title": "Mimalloc download", "user": {"login": "andronat", "id": 793408, "node_id": "MDQ6VXNlcjc5MzQwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/793408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andronat", "html_url": "https://github.com/andronat", "followers_url": "https://api.github.com/users/andronat/followers", "following_url": "https://api.github.com/users/andronat/following{/other_user}", "gists_url": "https://api.github.com/users/andronat/gists{/gist_id}", "starred_url": "https://api.github.com/users/andronat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andronat/subscriptions", "organizations_url": "https://api.github.com/users/andronat/orgs", "repos_url": "https://api.github.com/users/andronat/repos", "events_url": "https://api.github.com/users/andronat/events{/privacy}", "received_events_url": "https://api.github.com/users/andronat/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "andronat", "id": 793408, "node_id": "MDQ6VXNlcjc5MzQwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/793408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andronat", "html_url": "https://github.com/andronat", "followers_url": "https://api.github.com/users/andronat/followers", "following_url": "https://api.github.com/users/andronat/following{/other_user}", "gists_url": "https://api.github.com/users/andronat/gists{/gist_id}", "starred_url": "https://api.github.com/users/andronat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andronat/subscriptions", "organizations_url": "https://api.github.com/users/andronat/orgs", "repos_url": "https://api.github.com/users/andronat/repos", "events_url": "https://api.github.com/users/andronat/events{/privacy}", "received_events_url": "https://api.github.com/users/andronat/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "assignees": [{"login": "andronat", "id": 793408, "node_id": "MDQ6VXNlcjc5MzQwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/793408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andronat", "html_url": "https://github.com/andronat", "followers_url": "https://api.github.com/users/andronat/followers", "following_url": "https://api.github.com/users/andronat/following{/other_user}", "gists_url": "https://api.github.com/users/andronat/gists{/gist_id}", "starred_url": "https://api.github.com/users/andronat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andronat/subscriptions", "organizations_url": "https://api.github.com/users/andronat/orgs", "repos_url": "https://api.github.com/users/andronat/repos", "events_url": "https://api.github.com/users/andronat/events{/privacy}", "received_events_url": "https://api.github.com/users/andronat/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2020-05-04T15:51:56Z", "updated_at": "2020-08-22T16:01:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "active_lock_reason": null, "draft": true, "pull_request": {"url": "https://api.github.com/repos/srg-imperial/SaBRe/pulls/54", "html_url": "https://github.com/srg-imperial/SaBRe/pull/54", "diff_url": "https://github.com/srg-imperial/SaBRe/pull/54.diff", "patch_url": "https://github.com/srg-imperial/SaBRe/pull/54.patch", "merged_at": null}, "body": "This PR contains the following changes that are required to be bundled together in order for tests to pass:\r\n- Statically links [mimalloc](https://github.com/microsoft/mimalloc) to both SaBRe and all plugins by default.\r\n  - **Static vs Dynamic**: I chose to statically link mimalloc in order to avoid where the `libmimalloc.so` library should be placed. Having one binary that you can move anywhere you want is much more flexible.\r\n  - **Why mimalloc**: mimalloc uses `mmap` to handle its heap. This creates a natural separation between SaBRe+plugins and the client. mimalloc is also relatively small and uses `cmake` that makes it \"easy\" to integrate its build with SaBRe.\r\n    - I also tried to integrate `jemalloc` but `jemalloc` by default uses `brk()` so we end up having the same issue as `libc`. \r\n    - I didn't try `tcmalloc`.\r\n  - **Why do we patch mimalloc**: mimalloc by default will try and mmap pages at an empty space at a very low address space (look [here](https://github.com/microsoft/mimalloc/blob/master/src/os.c#L416) and you can verify for your own interest by running: `LD_PRELOAD=./libmimalloc.so.1.6 cat /proc/self/maps | less`). These maps are created with `mmap` when SaBRe starts (as SaBRe now uses mimalloc). Now when we load a client that uses `tsan`, `tsan` scans the memory to check what is there already. We had issues with this scanning process before, this is why we have this SaBRe code [here](https://github.com/srg-imperial/SaBRe/blob/master/loader/ld_sc_handler.c#L45). `tsan` doesn't recognize these mimalloc-heap memory areas as \"standard\" and throws an error when scans the process memory maps. You can find the `tsan` allowed ranges [here](https://github.com/llvm/llvm-project/blob/1624be938dd2badf8297e63b6b330882b8023372/compiler-rt/lib/tsan/rtl/tsan_platform.h#L58-L76), whatever is outside of these ranges, will make `tsan` fail.  In the beginning I though of patching the SaBRe code to hide the mimalloc-heap area but I think this will create more issues rather than solve anything. So the easiest way is to disable the mimalloc hint, and delegate the `mmap` area to the kernel. This is absolutely fine from mimalloc's perspective.\r\n  - **What is `MI_LOCAL_DYNAMIC_TLS=ON`**: Read [here](https://github.com/microsoft/mimalloc/issues/147).\r\n  - **Static linking vs compiling with Object**: mimalloc suggests an alternative building way [here](https://github.com/microsoft/mimalloc#static-override). Honestly I tried to make this work but `cmake` made my life extremely hard and at some point I just quit. If anyone has an opinion regarding `.a` vs `.o` static linking, I would also like to know more.\r\n- Fixes (in a slow way) TLS swapping.\r\n  - As we discussed, the plugin lives in the link maps of SaBRe. Thus switching the TLS is mandatory every time we jump from the client to the plugin. This PR safeguards all access points to the plugin (i.e. syscalls and vDSO) and properly switches the TLS.\r\n  - The following solution introduces overhead as we introduce 2 extra syscalls for every client syscall. The ideal solution would be if the plugin were to live in the same link maps as the client.\r\n    - The exact amount of overhead is to be measured.\r\n- Fixes an infinite recursion case that vDSO and syscalls are vulnerable to.\r\n  - mimalloc uses vDSO to sync heap access. SaBRe patches the whole vDSO shared object. This creates an infinite recursion situation when mimalloc (or any vDSO call in general) from inside the plugin makes a vDSO call which again ends up in the plugin handler which creates an infinite recursion.", "reactions": {"url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/srg-imperial/SaBRe/issues/54/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}