{"total_count": 1, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/boku7/BokuLoader/issues/31", "repository_url": "https://api.github.com/repos/boku7/BokuLoader", "labels_url": "https://api.github.com/repos/boku7/BokuLoader/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/boku7/BokuLoader/issues/31/comments", "events_url": "https://api.github.com/repos/boku7/BokuLoader/issues/31/events", "html_url": "https://github.com/boku7/BokuLoader/pull/31", "id": 1887363131, "node_id": "PR_kwDOF6FO785Z3Eq2", "number": 31, "title": "Fixed a potential access violation", "user": {"login": "schen0x", "id": 59730502, "node_id": "MDQ6VXNlcjU5NzMwNTAy", "avatar_url": "https://avatars.githubusercontent.com/u/59730502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schen0x", "html_url": "https://github.com/schen0x", "followers_url": "https://api.github.com/users/schen0x/followers", "following_url": "https://api.github.com/users/schen0x/following{/other_user}", "gists_url": "https://api.github.com/users/schen0x/gists{/gist_id}", "starred_url": "https://api.github.com/users/schen0x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schen0x/subscriptions", "organizations_url": "https://api.github.com/users/schen0x/orgs", "repos_url": "https://api.github.com/users/schen0x/repos", "events_url": "https://api.github.com/users/schen0x/events{/privacy}", "received_events_url": "https://api.github.com/users/schen0x/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-09-08T10:09:18Z", "updated_at": "2023-09-19T03:57:09Z", "closed_at": null, "author_association": "NONE", "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/boku7/BokuLoader/pulls/31", "html_url": "https://github.com/boku7/BokuLoader/pull/31", "diff_url": "https://github.com/boku7/BokuLoader/pull/31.diff", "patch_url": "https://github.com/boku7/BokuLoader/pull/31.patch", "merged_at": null}, "body": "Add an option to not parse the content of `ExportedDirectory` when target dll is an image, because:\r\n- The ExportedDirectory (VA) is an address in `.rdata`;\r\n- The address is de-referenced in the `getExportedAddressTable` and 3 other assembly functions;\r\n- `parseDLL()` is called on the `raw_beacon_dll`, which is an image;\r\n- However, this address may not exist on an image (because this may be a big address, but image is not loaded) thus may trigger an access violation. Specifically, when \"ExportedDirectoryRVA\" > \"imageSize\".\r\n(Not sure if there is a better solution)\r\n- The modification should not effect other code, i.e when parsing an  in-memory dll; but will parse only the header when the dll is an image (probably another solution is to add auto-detection of image-only header (e.g PE\\0\\0) but it could be an extra point of failure?) because the data will be garbage anyway and may trigger an alarm.", "reactions": {"url": "https://api.github.com/repos/boku7/BokuLoader/issues/31/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/boku7/BokuLoader/issues/31/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}