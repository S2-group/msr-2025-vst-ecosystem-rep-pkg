{"total_count": 2, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/monadgroup/axiom/issues/149", "repository_url": "https://api.github.com/repos/monadgroup/axiom", "labels_url": "https://api.github.com/repos/monadgroup/axiom/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/monadgroup/axiom/issues/149/comments", "events_url": "https://api.github.com/repos/monadgroup/axiom/issues/149/events", "html_url": "https://github.com/monadgroup/axiom/pull/149", "id": 380686410, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwODI1OTM4", "number": 149, "title": "Static build on Mac building but not running", "user": {"login": "remaininlight", "id": 4106946, "node_id": "MDQ6VXNlcjQxMDY5NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4106946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remaininlight", "html_url": "https://github.com/remaininlight", "followers_url": "https://api.github.com/users/remaininlight/followers", "following_url": "https://api.github.com/users/remaininlight/following{/other_user}", "gists_url": "https://api.github.com/users/remaininlight/gists{/gist_id}", "starred_url": "https://api.github.com/users/remaininlight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remaininlight/subscriptions", "organizations_url": "https://api.github.com/users/remaininlight/orgs", "repos_url": "https://api.github.com/users/remaininlight/repos", "events_url": "https://api.github.com/users/remaininlight/events{/privacy}", "received_events_url": "https://api.github.com/users/remaininlight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": true, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/monadgroup/axiom/milestones/9", "html_url": "https://github.com/monadgroup/axiom/milestone/9", "labels_url": "https://api.github.com/repos/monadgroup/axiom/milestones/9/labels", "id": 4033208, "node_id": "MDk6TWlsZXN0b25lNDAzMzIwOA==", "number": 9, "title": "0.4.4", "description": "", "creator": {"login": "cpdt", "id": 16081865, "node_id": "MDQ6VXNlcjE2MDgxODY1", "avatar_url": "https://avatars.githubusercontent.com/u/16081865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpdt", "html_url": "https://github.com/cpdt", "followers_url": "https://api.github.com/users/cpdt/followers", "following_url": "https://api.github.com/users/cpdt/following{/other_user}", "gists_url": "https://api.github.com/users/cpdt/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpdt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpdt/subscriptions", "organizations_url": "https://api.github.com/users/cpdt/orgs", "repos_url": "https://api.github.com/users/cpdt/repos", "events_url": "https://api.github.com/users/cpdt/events{/privacy}", "received_events_url": "https://api.github.com/users/cpdt/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 11, "state": "open", "created_at": "2019-02-05T21:05:37Z", "updated_at": "2019-03-24T19:39:04Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2018-11-14T12:58:25Z", "updated_at": "2019-02-05T21:06:19Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/monadgroup/axiom/pulls/149", "html_url": "https://github.com/monadgroup/axiom/pull/149", "diff_url": "https://github.com/monadgroup/axiom/pull/149.diff", "patch_url": "https://github.com/monadgroup/axiom/pull/149.patch", "merged_at": null}, "body": "After some wrangling Axiom is building statically on my Mac but when it runs I get:\r\n```\r\n\"/Users/user/Bounce/groove-axiom/cmake-build-static-debug/editor/backend/standalone/Axiom Standalone.app/Contents/MacOS/Axiom Standalone\"\r\n2018-11-14 12:37:39.243647+0000 Axiom Standalone[51624:456889] ASSERT failure in QVariant: \"Trying to construct an unknown type\", file kernel/qvariant.cpp, line 1136\r\nSignal: SIGABRT (signal SIGABRT)\r\n```\r\nWhich occurs when QVariant::create is called with type QVariant::Brush (66).\r\nIn order to get static linking working I referred to this:\r\nhttp://doc.qt.io/qt-5/osx-deployment.html\r\nBut when not using QMake it seems that many libraries and macOS frameworks must be linked in CMake.\r\nAny ideas about what might be causing the current runtime error would be useful. A possible clue is that HandlersManager::registerHandler in qvariant.cpp is never called, so perhaps the Brush type is never being registered for some reason?\r\n\r\nI also get these warnings on build:\r\n```\r\nld: warning: direct access in function 'std::__1::__function::__func<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'(), std::__1::allocator<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'()>, void ()>::target(std::type_info const&) const' from file '../../../../compiler/target/debug/libcompiler.a(OrcCBindings.cpp.o)' to global weak symbol 'typeinfo name for llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'()' from file '../../../compiler/llvmmaxim/libllvm_axiom.a(LLVMMaxim.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\nld: warning: direct access in function 'std::__1::__function::__func<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'(), std::__1::allocator<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'()>, void ()>::target_type() const' from file '../../../../compiler/target/debug/libcompiler.a(OrcCBindings.cpp.o)' to global weak symbol 'typeinfo for llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::finalize()::'lambda'()' from file '../../../compiler/llvmmaxim/libllvm_axiom.a(LLVMMaxim.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\nld: warning: direct access in function 'std::__1::__function::__func<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'(), std::__1::allocator<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'()>, llvm::Expected<unsigned long long> ()>::target(std::type_info const&) const' from file '../../../../compiler/target/debug/libcompiler.a(OrcCBindings.cpp.o)' to global weak symbol 'typeinfo name for llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'()' from file '../../../compiler/llvmmaxim/libllvm_axiom.a(LLVMMaxim.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\nld: warning: direct access in function 'std::__1::__function::__func<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'(), std::__1::allocator<llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'()>, llvm::Expected<unsigned long long> ()>::target_type() const' from file '../../../../compiler/target/debug/libcompiler.a(OrcCBindings.cpp.o)' to global weak symbol 'typeinfo for llvm::orc::RTDyldObjectLinkingLayer::ConcreteLinkedObject<std::__1::shared_ptr<llvm::RuntimeDyld::MemoryManager>, std::__1::shared_ptr<llvm::JITSymbolResolver>, llvm::orc::RTDyldObjectLinkingLayer::addObject(std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> >, std::__1::shared_ptr<llvm::JITSymbolResolver>)::'lambda'(std::__1::__list_iterator<std::__1::unique_ptr<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject, std::__1::default_delete<llvm::orc::RTDyldObjectLinkingLayerBase::LinkedObject> >, void*>, llvm::RuntimeDyld&, std::__1::shared_ptr<llvm::object::OwningBinary<llvm::object::ObjectFile> > const&, std::__1::function<void ()>)>::getSymbolMaterializer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)::'lambda'()' from file '../../../compiler/llvmmaxim/libllvm_axiom.a(LLVMMaxim.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n```", "reactions": {"url": "https://api.github.com/repos/monadgroup/axiom/issues/149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/monadgroup/axiom/issues/149/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}