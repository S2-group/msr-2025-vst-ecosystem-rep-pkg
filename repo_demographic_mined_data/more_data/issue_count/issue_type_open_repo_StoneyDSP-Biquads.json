{"total_count": 2, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12", "repository_url": "https://api.github.com/repos/StoneyDSP/Biquads", "labels_url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12/comments", "events_url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12/events", "html_url": "https://github.com/StoneyDSP/Biquads/issues/12", "id": 1241805350, "node_id": "I_kwDOHWKRAs5KBHIm", "number": 12, "title": "Oversampling-related issues #2 - Frequency compensation schemes and depth", "user": {"login": "StoneyDSP", "id": 97741588, "node_id": "U_kgDOBdNrFA", "avatar_url": "https://avatars.githubusercontent.com/u/97741588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StoneyDSP", "html_url": "https://github.com/StoneyDSP", "followers_url": "https://api.github.com/users/StoneyDSP/followers", "following_url": "https://api.github.com/users/StoneyDSP/following{/other_user}", "gists_url": "https://api.github.com/users/StoneyDSP/gists{/gist_id}", "starred_url": "https://api.github.com/users/StoneyDSP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StoneyDSP/subscriptions", "organizations_url": "https://api.github.com/users/StoneyDSP/orgs", "repos_url": "https://api.github.com/users/StoneyDSP/repos", "events_url": "https://api.github.com/users/StoneyDSP/events{/privacy}", "received_events_url": "https://api.github.com/users/StoneyDSP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 4137830753, "node_id": "LA_kwDOHWKRAs72oklh", "url": "https://api.github.com/repos/StoneyDSP/Biquads/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "open", "locked": false, "assignee": {"login": "StoneyDSP", "id": 97741588, "node_id": "U_kgDOBdNrFA", "avatar_url": "https://avatars.githubusercontent.com/u/97741588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StoneyDSP", "html_url": "https://github.com/StoneyDSP", "followers_url": "https://api.github.com/users/StoneyDSP/followers", "following_url": "https://api.github.com/users/StoneyDSP/following{/other_user}", "gists_url": "https://api.github.com/users/StoneyDSP/gists{/gist_id}", "starred_url": "https://api.github.com/users/StoneyDSP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StoneyDSP/subscriptions", "organizations_url": "https://api.github.com/users/StoneyDSP/orgs", "repos_url": "https://api.github.com/users/StoneyDSP/repos", "events_url": "https://api.github.com/users/StoneyDSP/events{/privacy}", "received_events_url": "https://api.github.com/users/StoneyDSP/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "StoneyDSP", "id": 97741588, "node_id": "U_kgDOBdNrFA", "avatar_url": "https://avatars.githubusercontent.com/u/97741588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StoneyDSP", "html_url": "https://github.com/StoneyDSP", "followers_url": "https://api.github.com/users/StoneyDSP/followers", "following_url": "https://api.github.com/users/StoneyDSP/following{/other_user}", "gists_url": "https://api.github.com/users/StoneyDSP/gists{/gist_id}", "starred_url": "https://api.github.com/users/StoneyDSP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StoneyDSP/subscriptions", "organizations_url": "https://api.github.com/users/StoneyDSP/orgs", "repos_url": "https://api.github.com/users/StoneyDSP/repos", "events_url": "https://api.github.com/users/StoneyDSP/events{/privacy}", "received_events_url": "https://api.github.com/users/StoneyDSP/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2022-05-19T13:42:42Z", "updated_at": "2022-05-19T16:37:11Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "Current version: 1.0.04b\r\n\r\nThe typical BiQuad filter implementation is only safe within a range of it's frequency parameter - in our case, we have clamped the \"frequency\" parameter to min (SR/24576.0) and max (SR/2.125) ranges, and placed assertions if our parameter goes beyond the range of 20hz...20,000hz.\r\n\r\nIn our latest build, we have variable oversampling (up to x16) which can be used to combat the ill-effects of digital cramping (at the expense of heavy phase distortion, no less!) which affects the audio path only.\r\n\r\nDuring testing and building, any increase in OS rate would be reflected in our filter's centre frequency shifting upwards by the same multiplicative amount as our selected OS setting. A quick and dirty fix is to apply our variable named \"overSampling factor\" to the frequency parameter by a division, before going into the biquad processor.\r\n\r\nThe above works just fine operationally - the correct centre frequency is returned by the filter output. However, we are able to crash via assertion if we move up to, say, x16 oversampling and bring our frequency down toward it's minimum position. The position is marked on the GUI as 20hz, but of course our division is causing the actual number to be changed inside our BiQuad processor - our hz value, as the BiQaud processor sees it, goes beyond the lower bounds of 20hz, causing the assertion.\r\n\r\nThe above quick and dirty fix has been substituted for a BiQuad processor-wide fix in which the \"sampleRate\" variable which is now made public, accessed via the Wrapper and multiplied by \"overSampling factor\" - which is all updated on parameter change - and this new SR, being processor-wide, is then propagated to the assertions as well as the parameter control. Everything makes sense again.\r\n\r\nMaking the sampleRate variable public is not really an ideal fix in the wider world - this variable shouldn't really be accessible outside by the user (or other processors), particularly at run time. It may indeed be possible to call the BiQuad's prepare() method each time the OS is changed, but this also will potentially incur much more run-time hassle than is needed.\r\n\r\nA solid fix would leave the sampleRate variable private, similar to the juce DSP modules, but allow our filter's real centre frequency (and related safety assertions) to be oversampling-friendly.", "reactions": {"url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/StoneyDSP/Biquads/issues/12/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}